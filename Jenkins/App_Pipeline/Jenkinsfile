pipeline {
    agent any

    environment {
        DOCKER_CREDS = credentials('Docker_Creds')
        SNYK_TOKEN = credentials('Snyk_Token_ID')  // Use the credential ID here
        GIT_CRED = credentials('GitHub_Private_Repo')  // Use the GitHub credentials ID here
        
    }

    stages {
        stage('Checkout: Clone Repository') {
            steps {
                // Clone the private GitHub repository using stored credentials
                git branch: 'main',
                    url: 'https://github.com/Macarious-GK/DevOps.git',
                    credentialsId: 'GitHub_Private_Repo'
            }
        }

        stage('Linter_Stage: Flake8 --> Syntax errors') {
            steps {
                
                // Run Flake8, save the output to a report, and check for fatal errors (e.g., syntax errors)
                script {
                    // Run Flake8 and save report
                    sh 'flake8 --count --statistics --select=E999 --exit-zero > flake8_report.txt || true'
    
                    // Read the report
                    def report = readFile('flake8_report.txt')
                    echo "Flake8 Report:\n${report}"
                    
                    // Check if the report contains syntax errors (E999)
                    if (report.contains('E999')) {
                        error("Flake8 report contains syntax errors (E999)! Linting Stage Failing the pipeline.")
                    }else {
                    // If no syntax errors, display a message
                        echo "No syntax errors found in the Flake8 report."
                        echo "Linting Stage Passed SUCCESSFULLY"
                    }
                        
                    
                }
            }
        }

        stage('SAST Stage: Bandit --> Static Security Checks') {
            steps {
                script {
                    sh '''
                    echo "Running Bandit for security checks..."
                    bandit -r . -f json -o bandit_Report.json
                    
                    
                    # Check if Bandit found any issues
                    if grep '"issue_severity":' bandit_Report.json > /dev/null; then
                        echo "Failed from SAST stage: Security issues detected by Bandit."
                        exit 1
                    else
                        echo "SAST stage passed successfully: No issues found by Bandit."
                    fi
                    '''
                }
            }
        }  
        // stage('Unit Testing') {
        //     steps {
        //         sh '''
        //         echo "start Utest"
        //         cd App
        //         python3 -m venv venv
        //         source venv/bin/activate
        //         pip install -r requirements.txt
        //         python3 manage.py test
        //         '''
        //     }
        // }
        stage('App Feature Testing: UnitTesting') {
            steps {
                dir('App') {
                    script {
                        sh '''
                        echo "Starting unit tests..."
                        python3 -m venv venv

                        # Activate virtual environment using bash
                        bash -c "source venv/bin/activate && pip install -r requirements.txt && python3 manage.py test && deactivate"
                        result=$?

                        if [ $result -eq 0 ]; then
                            echo "Unit tests passed successfully."
                        else
                            echo "Unit tests failed. Please check the test results."
                            exit 1
                        fi
                        '''
                    }
                }
            }
        }
        stage('Docker Image Build') {
            steps {
                script {

                    dir('Docker') {

                        // Build the Docker image
                        echo "Building Docker image..."
                        sh 'docker build -t macarious25siv/books:V4 .'

                        // Check the result of the build and handle errors
                        def result = sh(script: 'docker images | grep macarious25siv/books', returnStatus: true)
                        if (result == 0) {
                            echo "Docker image built successfully."
                        } else {
                            error("Docker image build failed.")
                        }
                    }
                }
            }
        }


        stage('Docker Image Scanning Stage: Snyk') {
            steps {
                script {
                    dir('Docker') {

                    sh '''
                    echo "Running Snyk Container Test..."
                    snyk auth $SNYK_TOKEN
                    snyk container test macarious25siv/books:V4 --file=Dockerfile
                    
                    # If vulnerabilities are found, print the issues and fail the pipeline
                    if [ $? -ne 0 ]; then
                        echo "Snyk found vulnerabilities in the Docker image:"
                        snyk container test macarious25siv/books:V4 --file=Dockerfile --json | jq .
                        echo "Failing the pipeline due to Snyk vulnerabilities"
                        exit 1
                    else
                        echo "No vulnerabilities found by Snyk"
                    fi
                    '''
                }
            }
            }
        }

        stage('Docker Hub Login to ') {
            steps {
                script {
                    // Login to Docker Hub using stored credentials
                    echo "Logging in to Docker Hub..."
                    sh 'echo $DOCKER_CREDS_PSW | docker login -u $DOCKER_CREDS_USR --password-stdin'
                }
            }
        }

        stage('Docker Image Push ') {
            steps {
                script {
                    // Push the image to Docker Hub
                    echo "Pushing Docker image to Docker Hub..."
                    sh 'docker push macarious25siv/books:V4'
                }
            }
        }

        stage('Deploy on EKS'){
            steps{
                dir('K8s'){
                    withCredentials([aws(accessKeyVariable: 'AWS_ACCESS_KEY_ID', credentialsId: 'aws-jenkins-credentials', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY')]) {
                    sh '''
                    aws eks update-kubeconfig --name Macarious-eks-cluster --region us-east-2
                    kubectl get svc
                    echo "Applying namespace.yaml..."
                    kubectl apply -f namespace.yaml

                    echo "Applying pv.yaml..."
                    kubectl apply -f pv.yaml

                    echo "Applying pvc.yaml..."
                    kubectl apply -f pvc.yaml

                    echo "Applying job.yaml..."
                    kubectl apply -f job.yaml

                    echo "Applying service.yaml..."
                    kubectl apply -f service.yaml

                    echo "Applying ingress.yaml..."
                    kubectl apply -f ingress.yaml

                    echo "Applying deployment.yaml..."
                    kubectl apply -f deployment.yaml

                    '''
                }

                }
                

            }
        }
    }
    
    post {
        always {
            // Clean up the workspace and logout from Docker Hub
            echo "Cleaning up the workspace and logging out from Docker Hub..."
            sh 'docker logout'
            cleanWs()
        }
    }
}