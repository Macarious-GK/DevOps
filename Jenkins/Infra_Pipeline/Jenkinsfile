pipeline {
    agent any

    environment {
        // GitHub token for cloning the private repo
        GITHUB_TOKEN = credentials('GitHub_Private_Repo')
        // AWS region for the Terraform operations
        AWS_REGION = 'us-east-2'
    }

    stages {
        stage('Checkout: Clone Repository') {
            steps {
                // Clone the private GitHub repository using stored credentials
                git branch: 'main',
                    url: 'https://github.com/Macarious-GK/DevOps.git',
                    credentialsId: 'GitHub_Private_Repo'
            }
        }

        stage('Initialize Terraform') {
            steps {
                dir('Test-tf-Modules'){

                withCredentials([aws(accessKeyVariable: 'AWS_ACCESS_KEY_ID', credentialsId: 'aws-jenkins-credentials', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY')]) {
                    sh '''
                    terraform init
                    '''
                }
                }
            }
        }

        stage('Terraform Validate') {
            steps {
                dir('Test-tf-Modules'){
                withCredentials([aws(accessKeyVariable: 'AWS_ACCESS_KEY_ID', credentialsId: 'aws-jenkins-credentials', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY')]) {
                    sh '''
                    terraform validate
                    '''
                }
                }
            }
        }

        stage('Terraform Plan') {
            steps {
                dir('Test-tf-Modules'){
                withCredentials([aws(accessKeyVariable: 'AWS_ACCESS_KEY_ID', credentialsId: 'aws-jenkins-credentials', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY')]) {
                    sh '''
                    terraform plan
                    '''
                }
                }
            }
        }

        stage('Terraform Apply') {
            steps {
                dir('Test-tf-Modules'){
                withCredentials([aws(accessKeyVariable: 'AWS_ACCESS_KEY_ID', credentialsId: 'aws-jenkins-credentials', secretKeyVariable: 'AWS_SECRET_ACCESS_KEY')]) {
                    sh '''
                    terraform apply -auto-approve
                    '''
                }
                }
            }
        }
    }

    post {
        always {
            // Clean up workspace after the build
            cleanWs()
        }

        success {
            echo 'Terraform infrastructure setup completed successfully!'
        }

        failure {
            echo 'Terraform infrastructure setup failed.'
        }
    }
}